// Code generated by "core generate"; DO NOT EDIT.

package agg

import (
	"cogentcore.org/core/enums"
)

var _AggsValues = []Aggs{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}

// AggsN is the highest valid value for type Aggs, plus one.
const AggsN Aggs = 16

var _AggsValueMap = map[string]Aggs{`AggCount`: 0, `AggSum`: 1, `AggProd`: 2, `AggMin`: 3, `AggMax`: 4, `AggMean`: 5, `AggVar`: 6, `AggStd`: 7, `AggSem`: 8, `AggVarPop`: 9, `AggStdPop`: 10, `AggSemPop`: 11, `AggMedian`: 12, `AggQ1`: 13, `AggQ3`: 14, `AggSumSq`: 15}

var _AggsDescMap = map[Aggs]string{0: `Count of number of elements`, 1: `Sum of elements`, 2: `Product of elements`, 3: `Min minimum value`, 4: `Max maximum value`, 5: `Mean mean value`, 6: `Var sample variance (squared diffs from mean, divided by n-1)`, 7: `Std sample standard deviation (sqrt of Var)`, 8: `Sem sample standard error of the mean (Std divided by sqrt(n))`, 9: `VarPop population variance (squared diffs from mean, divided by n)`, 10: `StdPop population standard deviation (sqrt of VarPop)`, 11: `SemPop population standard error of the mean (StdPop divided by sqrt(n))`, 12: `Median middle value in sorted ordering`, 13: `Q1 first quartile = 25%ile value = .25 quantile value`, 14: `Q3 third quartile = 75%ile value = .75 quantile value`, 15: `SumSq sum of squares`}

var _AggsMap = map[Aggs]string{0: `AggCount`, 1: `AggSum`, 2: `AggProd`, 3: `AggMin`, 4: `AggMax`, 5: `AggMean`, 6: `AggVar`, 7: `AggStd`, 8: `AggSem`, 9: `AggVarPop`, 10: `AggStdPop`, 11: `AggSemPop`, 12: `AggMedian`, 13: `AggQ1`, 14: `AggQ3`, 15: `AggSumSq`}

// String returns the string representation of this Aggs value.
func (i Aggs) String() string { return enums.String(i, _AggsMap) }

// SetString sets the Aggs value from its string representation,
// and returns an error if the string is invalid.
func (i *Aggs) SetString(s string) error { return enums.SetString(i, s, _AggsValueMap, "Aggs") }

// Int64 returns the Aggs value as an int64.
func (i Aggs) Int64() int64 { return int64(i) }

// SetInt64 sets the Aggs value from an int64.
func (i *Aggs) SetInt64(in int64) { *i = Aggs(in) }

// Desc returns the description of the Aggs value.
func (i Aggs) Desc() string { return enums.Desc(i, _AggsDescMap) }

// AggsValues returns all possible values for the type Aggs.
func AggsValues() []Aggs { return _AggsValues }

// Values returns all possible values for the type Aggs.
func (i Aggs) Values() []enums.Enum { return enums.Values(_AggsValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Aggs) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Aggs) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "Aggs") }
