// Code generated by "goki generate"; DO NOT EDIT.

package etable

import (
	"errors"
	"log"
	"strconv"
	"strings"

	"goki.dev/enums"
)

var _DelimsValues = []Delims{0, 1, 2, 3}

// DelimsN is the highest valid value
// for type Delims, plus one.
const DelimsN Delims = 4

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the enumgen command to generate them again.
func _DelimsNoOp() {
	var x [1]struct{}
	_ = x[Tab-(0)]
	_ = x[Comma-(1)]
	_ = x[Space-(2)]
	_ = x[Detect-(3)]
}

var _DelimsNameToValueMap = map[string]Delims{
	`Tab`:    0,
	`tab`:    0,
	`Comma`:  1,
	`comma`:  1,
	`Space`:  2,
	`space`:  2,
	`Detect`: 3,
	`detect`: 3,
}

var _DelimsDescMap = map[Delims]string{
	0: `Tab is the tab rune delimiter, for TSV tab separated values`,
	1: `Comma is the comma rune delimiter, for CSV comma separated values`,
	2: `Space is the space rune delimiter, for SSV space separated value`,
	3: `Detect is used during reading a file -- reads the first line and detects tabs or commas`,
}

var _DelimsMap = map[Delims]string{
	0: `Tab`,
	1: `Comma`,
	2: `Space`,
	3: `Detect`,
}

// String returns the string representation
// of this Delims value.
func (i Delims) String() string {
	if str, ok := _DelimsMap[i]; ok {
		return str
	}
	return strconv.FormatInt(int64(i), 10)
}

// SetString sets the Delims value from its
// string representation, and returns an
// error if the string is invalid.
func (i *Delims) SetString(s string) error {
	if val, ok := _DelimsNameToValueMap[s]; ok {
		*i = val
		return nil
	}
	if val, ok := _DelimsNameToValueMap[strings.ToLower(s)]; ok {
		*i = val
		return nil
	}
	return errors.New(s + " is not a valid value for type Delims")
}

// Int64 returns the Delims value as an int64.
func (i Delims) Int64() int64 {
	return int64(i)
}

// SetInt64 sets the Delims value from an int64.
func (i *Delims) SetInt64(in int64) {
	*i = Delims(in)
}

// Desc returns the description of the Delims value.
func (i Delims) Desc() string {
	if str, ok := _DelimsDescMap[i]; ok {
		return str
	}
	return i.String()
}

// DelimsValues returns all possible values
// for the type Delims.
func DelimsValues() []Delims {
	return _DelimsValues
}

// Values returns all possible values
// for the type Delims.
func (i Delims) Values() []enums.Enum {
	res := make([]enums.Enum, len(_DelimsValues))
	for i, d := range _DelimsValues {
		res[i] = d
	}
	return res
}

// IsValid returns whether the value is a
// valid option for type Delims.
func (i Delims) IsValid() bool {
	_, ok := _DelimsMap[i]
	return ok
}

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Delims) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Delims) UnmarshalText(text []byte) error {
	if err := i.SetString(string(text)); err != nil {
		log.Println(err)
	}
	return nil
}
