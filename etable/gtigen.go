// Code generated by "goki generate"; DO NOT EDIT.

package etable

import (
	"goki.dev/gti"
)

var _ = gti.AddType(&gti.Type{Name: "github.com/emer/etable/v2/etable.Table", IDName: "table", Doc: "etable.Table is the emer DataTable structure, containing columns of etensor tensors.\nAll tensors MUST have RowMajor stride layout!", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}, Methods: []gti.Method{{Name: "AddRows", Doc: "AddRows adds n rows to each of the columns", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}, Args: []string{"n"}}, {Name: "SetNumRows", Doc: "SetNumRows sets the number of rows in the table, across all columns\nif rows = 0 then effective number of rows in tensors is 1, as this dim cannot be 0", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}, Args: []string{"rows"}}, {Name: "SaveCSV", Doc: "SaveCSV writes a table to a comma-separated-values (CSV) file\n(where comma = any delimiter, specified in the delim arg).\nIf headers = true then generate C++ emergent-tyle column headers.\nThese headers have full configuration information for the tensor\ncolumns.  Otherwise, only the data is written.", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}, Args: []string{"filename", "delim", "headers"}, Returns: []string{"error"}}, {Name: "OpenCSV", Doc: "OpenCSV reads a table from a comma-separated-values (CSV) file\n(where comma = any delimiter, specified in the delim arg),\nusing the Go standard encoding/csv reader conforming to the official CSV standard.\nIf the table does not currently have any columns, the first row of the file\nis assumed to be headers, and columns are constructed therefrom.\nThe C++ emergent column headers are parsed -- these have full configuration\ninformation for tensor dimensionality.\nIf the table DOES have existing columns, then those are used robustly\nfor whatever information fits from each row of the file.", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}, Args: []string{"filename", "delim"}, Returns: []string{"error"}}}, Fields: []gti.Field{{Name: "Cols", Doc: "columns of data, as etensor.Tensor tensors"}, {Name: "ColNames", Doc: "the names of the columns"}, {Name: "Rows", Doc: "number of rows, which is enforced to be the size of the outer-most dimension of the column tensors"}, {Name: "ColNameMap", Doc: "the map of column names to column numbers"}, {Name: "MetaData", Doc: "misc meta data for the table.  We use lower-case key names following the struct tag convention:  name = name of table; desc = description; read-only = gui is read-only; precision = n for precision to write out floats in csv.  For Column-specific data, we look for ColName: prefix, specifically ColName:desc = description of the column contents, which is shown as tooltip in the etview.TableView, and :width for width of a column"}}})

var _ = gti.AddType(&gti.Type{Name: "github.com/emer/etable/v2/etable.IdxView", IDName: "idx-view", Doc: "IdxView is an indexed wrapper around an etable.Table that provides a\nspecific view onto the Table defined by the set of indexes.\nThis provides an efficient way of sorting and filtering a table by only\nupdating the indexes while doing nothing to the Table itself.\nTo produce a table that has data actually organized according to the\nindexed order, call the NewTable method.\nIdxView views on a table can also be organized together as Splits\nof the table rows, e.g., by grouping values along a given column.", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}, Methods: []gti.Method{{Name: "Sequential", Doc: "Sequential sets indexes to sequential row-wise indexes into table", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}}, {Name: "SortColName", Doc: "SortColName sorts the indexes into our Table according to values in\ngiven column name, using either ascending or descending order.\nOnly valid for 1-dimensional columns.\nReturns error if column name not found.", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}, Args: []string{"colNm", "ascending"}, Returns: []string{"error"}}, {Name: "FilterColName", Doc: "FilterColName filters the indexes into our Table according to values in\ngiven column name, using string representation of column values.\nIncludes rows with matching values unless exclude is set.\nIf contains, only checks if row contains string; if ignoreCase, ignores case.\nUse named args for greater clarity.\nOnly valid for 1-dimensional columns.\nReturns error if column name not found.", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}, Args: []string{"colNm", "str", "exclude", "contains", "ignoreCase"}, Returns: []string{"error"}}, {Name: "AddRows", Doc: "AddRows adds n rows to end of underlying Table, and to the indexes in this view", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}, Args: []string{"n"}}, {Name: "SaveCSV", Doc: "SaveCSV writes a table idx view to a comma-separated-values (CSV) file\n(where comma = any delimiter, specified in the delim arg).\nIf headers = true then generate C++ emergent-tyle column headers.\nThese headers have full configuration information for the tensor\ncolumns.  Otherwise, only the data is written.", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}, Args: []string{"filename", "delim", "headers"}, Returns: []string{"error"}}, {Name: "OpenCSV", Doc: "OpenCSV reads a table idx view from a comma-separated-values (CSV) file\n(where comma = any delimiter, specified in the delim arg),\nusing the Go standard encoding/csv reader conforming to the official CSV standard.\nIf the table does not currently have any columns, the first row of the file\nis assumed to be headers, and columns are constructed therefrom.\nThe C++ emergent column headers are parsed -- these have full configuration\ninformation for tensor dimensionality.\nIf the table DOES have existing columns, then those are used robustly\nfor whatever information fits from each row of the file.", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}, Args: []string{"filename", "delim"}, Returns: []string{"error"}}}, Fields: []gti.Field{{Name: "Table", Doc: "Table that we are an indexed view onto"}, {Name: "Idxs", Doc: "current indexes into Table"}, {Name: "lessFunc", Doc: "current Less function used in sorting"}}})
