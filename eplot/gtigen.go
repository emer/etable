// Code generated by "goki generate"; DO NOT EDIT.

package eplot

import (
	"goki.dev/gi"
	"goki.dev/gti"
	"goki.dev/ki"
)

// Plot2DType is the [gti.Type] for [Plot2D]
var Plot2DType = gti.AddType(&gti.Type{Name: "github.com/emer/etable/v2/eplot.Plot2D", IDName: "plot-2-d", Doc: "Plot2D is a GoGi Widget that provides a 2D plot of selected columns of etable data", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}, Methods: []gti.Method{{Name: "SaveSVG", Doc: "SaveSVG saves the plot to an svg -- first updates to ensure that plot is current", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}, Args: []string{"fname"}}, {Name: "SavePNG", Doc: "SavePNG saves the current plot to a png, capturing current render", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}, Args: []string{"fname"}}, {Name: "SaveCSV", Doc: "SaveCSV saves the Table data to a csv (comma-separated values) file with headers (any delim)", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}, Args: []string{"fname", "delim"}}, {Name: "SaveAll", Doc: "SaveAll saves the current plot to a png, svg, and the data to a tsv -- full save\nAny extension is removed and appropriate extensions are added", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}, Args: []string{"fname"}}, {Name: "OpenCSV", Doc: "OpenCSV opens the Table data from a csv (comma-separated values) file (or any delim)", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}, Args: []string{"fname", "delim"}}, {Name: "SetColsByName", Doc: "SetColsByName turns cols On or Off if their name contains given string", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}, Args: []string{"nameContains", "on"}}}, Embeds: []gti.Field{{Name: "Layout"}}, Fields: []gti.Field{{Name: "Table", Doc: "the idxview of the table that we're plotting"}, {Name: "Params", Doc: "the overall plot parameters"}, {Name: "Cols", Doc: "the parameters for each column of the table"}, {Name: "Plot", Doc: "the gonum plot that actually does the plotting -- always save the last one generated"}, {Name: "ConfigPlotFunc", Doc: "ConfigPlotFunc is a function to call to configure [Plot2D.Plot], the gonum plot that\nactually does the plotting. It is called after [Plot] is generated, and properties\nof [Plot] can be modified in it. Properties of [Plot] should not be modified outside\nof this function, as doing so will have no effect."}, {Name: "SVGFile", Doc: "current svg file"}, {Name: "DataFile", Doc: "current csv data file"}, {Name: "InPlot", Doc: "currently doing a plot"}}, Instance: &Plot2D{}})

// NewPlot2D adds a new [Plot2D] with the given name to the given parent:
// Plot2D is a GoGi Widget that provides a 2D plot of selected columns of etable data
func NewPlot2D(par ki.Ki, name ...string) *Plot2D {
	return par.NewChild(Plot2DType, name...).(*Plot2D)
}

// KiType returns the [*gti.Type] of [Plot2D]
func (t *Plot2D) KiType() *gti.Type {
	return Plot2DType
}

// New returns a new [*Plot2D] value
func (t *Plot2D) New() ki.Ki {
	return &Plot2D{}
}

// SetParams sets the [Plot2D.Params]:
// the overall plot parameters
func (t *Plot2D) SetParams(v PlotParams) *Plot2D { t.Params = v; return t }

// SetConfigPlotFunc sets the [Plot2D.ConfigPlotFunc]:
// ConfigPlotFunc is a function to call to configure [Plot2D.Plot], the gonum plot that
// actually does the plotting. It is called after [Plot] is generated, and properties
// of [Plot] can be modified in it. Properties of [Plot] should not be modified outside
// of this function, as doing so will have no effect.
func (t *Plot2D) SetConfigPlotFunc(v func()) *Plot2D { t.ConfigPlotFunc = v; return t }

// SetSvgfile sets the [Plot2D.SVGFile]:
// current svg file
func (t *Plot2D) SetSvgfile(v gi.FileName) *Plot2D { t.SVGFile = v; return t }

// SetDataFile sets the [Plot2D.DataFile]:
// current csv data file
func (t *Plot2D) SetDataFile(v gi.FileName) *Plot2D { t.DataFile = v; return t }

// SetTooltip sets the [Plot2D.Tooltip]
func (t *Plot2D) SetTooltip(v string) *Plot2D { t.Tooltip = v; return t }

// SetStackTop sets the [Plot2D.StackTop]
func (t *Plot2D) SetStackTop(v int) *Plot2D { t.StackTop = v; return t }

var _ = gti.AddType(&gti.Type{Name: "github.com/emer/etable/v2/eplot.PlotParams", IDName: "plot-params", Doc: "PlotParams are parameters for overall plot", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}, Fields: []gti.Field{{Name: "Title", Doc: "optional title at top of plot"}, {Name: "Type", Doc: "type of plot to generate.  For a Bar plot, items are plotted ordinally by row and the XAxis is optional"}, {Name: "Lines", Doc: "whether to plot lines"}, {Name: "Points", Doc: "whether to plot points with symbols"}, {Name: "LineWidth", Doc: "width of lines"}, {Name: "PointSize", Doc: "size of points"}, {Name: "PointShape", Doc: "the shape used to draw points"}, {Name: "BarWidth", Doc: "width of bars for bar plot, as fraction of available space -- 1 = no gaps, .8 default"}, {Name: "NegXDraw", Doc: "draw lines that connect points with a negative X-axis direction -- otherwise these are treated as breaks between repeated series and not drawn"}, {Name: "Scale", Doc: "overall scaling factor -- the larger the number, the larger the fonts are relative to the graph"}, {Name: "XAxisCol", Doc: "what column to use for the common X axis -- if empty or not found, the row number is used.  This optional for Bar plots -- if present and LegendCol is also present, then an extra space will be put between X values."}, {Name: "LegendCol", Doc: "optional column for adding a separate colored / styled line or bar according to this value -- acts just like a separate Y variable, crossed with Y variables"}, {Name: "XAxisRot", Doc: "rotation of the X Axis labels, in degrees"}, {Name: "XAxisLabel", Doc: "optional label to use for XAxis instead of column name"}, {Name: "YAxisLabel", Doc: "optional label to use for YAxis -- if empty, first column name is used"}, {Name: "Plot", Doc: "our plot, for update method"}}})

var _ = gti.AddType(&gti.Type{Name: "github.com/emer/etable/v2/eplot.ColParams", IDName: "col-params", Doc: "ColParams are parameters for plotting one column of data", Directives: []gti.Directive{{Tool: "gti", Directive: "add"}}, Fields: []gti.Field{{Name: "On", Doc: "whether to plot this column"}, {Name: "Col", Doc: "name of column we're plotting"}, {Name: "Lines", Doc: "whether to plot lines; uses the overall plot option if unset"}, {Name: "Points", Doc: "whether to plot points with symbols; uses the overall plot option if unset"}, {Name: "LineWidth", Doc: "the width of lines; uses the overall plot option if unset"}, {Name: "PointSize", Doc: "the size of points; uses the overall plot option if unset"}, {Name: "PointShape", Doc: "the shape used to draw points; uses the overall plot option if unset"}, {Name: "Range", Doc: "effective range of data to plot -- either end can be fixed"}, {Name: "FullRange", Doc: "full actual range of data -- only valid if specifically computed"}, {Name: "Color", Doc: "color to use when plotting the line / column"}, {Name: "NTicks", Doc: "desired number of ticks"}, {Name: "Lbl", Doc: "if non-empty, this is an alternative label to use in plotting"}, {Name: "TensorIdx", Doc: "if column has n-dimensional tensor cells in each row, this is the index within each cell to plot -- use -1 to plot *all* indexes as separate lines"}, {Name: "ErrCol", Doc: "specifies a column containing error bars for this column"}, {Name: "IsString", Doc: "if true this is a string column -- plots as labels"}, {Name: "Plot", Doc: "our plot, for update method"}}})
